# global:
#   imageRegistry: ""
#   ## E.g.
#   ## imagePullSecrets:
#   ##   - myRegistryKeySecretName
#   ##
#   imagePullSecrets: []
#   storageClass: ""
#   namespaceOverride: ""
tags:
  front-end: true
  back-end: true
  nginx: true
aas-backend:
  image:
    repository: aas-backend
    pullPolicy: Never
    # # overrides the image tag whose default is the chart appversion.
    # tag: "1.0"
  environment: prod
  inference-engine-namespace: inference-engine
  replicaCount: 1
  env:
    PROD_FRONTEND_HOST: http://appstore.ai
    PROD_SECRET_KEY: 60bbf2dacae7ed30a5f79a31f2e1f0424dfbed678ea0b23c7c3374b3a67c1119
    PROD_ADMIN_SECRET_KEY: 60bbf2dacae7ed30a5f79a31f2e1f0424dfbed678ea0b23c7c3374b3a67c1119
    PROD_ALGORITHM: HS256
    PROD_MONGO_DSN: mongodb://aas-mongodb
    PROD_DB_NAME: appStoreProdDB
    PROD_MAX_UPLOAD_SIZE_GB: "10"
    PROD_MONGO_USERNAME: aasRootDBUser
    PROD_MONGO_PASSWORD: TempPassword1234
    PROD_IE_NAMESPACE: inference-engine
    CLEARML_WEB_HOST: https://app.clear.ml
    CLEARML_API_HOST: https://api.clear.ml
    CLEARML_FILES_HOST: https://files.clear.ml
    CLEARML_API_ACCESS_KEY: 5BGFOYCD786OFPFP3M9F
    CLEARML_API_SECRET_KEY: HHqILZP4YZqOeTKneHUEc4oG6VosVEfDtVQV2ySheRLFVq9aSn
  ingress:
    enabled: true
    className: "nginx"
    annotations:
      kubernetes.io/ingress.allow-http: "true"
      # kubernetes.io/tls-acme: "true"
    hosts:
      # Note for local dev, set the following in the hostfile
      # 127.0.0.1 api.appstore.ai
      # 127.0.0.1 appstore.ai
      - host: api.appstore.ai
        paths:
          - path: /
            pathType: Prefix
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 10
    targetCPUUtilizationPercentage: 80
  resources:
    limits:
      cpu: 4
      memory: "8G"
  tags:
    knative-backend: true
aas-frontend:
  image:
    repository: aas-frontend
    pullPolicy: Never
    # # overrides the image tag whose default is the chart appversion.
    # tag: "1.0"
  replicaCount: 1
  ingress:
    enabled: true
    className: "nginx"
    annotations:
      kubernetes.io/ingress.allow-http: "true"
      nginx.ingress.kubernetes.io/use-regex: "true"
      nginx.ingress.kubernetes.io/rewrite-target: /$1
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: appstore.ai
        paths:
          - path: /(.*)
            pathType: Prefix
    # tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 10
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80
  resources:
    limits:
      cpu: 4
      memory: "4G"
mongodb:
  nameOverride: "aas-mongodb"
  fullnameOverride: "aas-mongodb"
  auth:
    enabled: true
    rootUser: "aasRootDBUser"
    rootPassword: "TempPassword1234"
  initdbScripts:
    init-db.js: |
      mongo = db.getSiblingDB('appStoreProdDB');
      mongo.createCollection('users');
      mongo.users.createIndex({'userId': 1}, {unique:true}) 
      mongo.models.createIndex({ modelId: 1, creatorUserId: 1 }, { unique: true });
      mongo.services.createIndex({ serviceName: 1 }, { unique: true });
      mongo.users.insertMany([
        {
          userId: 'master',
          name: 'Master User',
          password: '$2b$12$dJgAk/YGHoGH203M2H0Fvu.XL3A1BulreQS1NZTRcZ9XHhUHfkU.K',
          adminPriv: true,
          created: '2022-11-24 11:27:52.118503',
          lastModified: '2022-11-25 11:27:52.118503'
        },
        {
          userId: 'dev1',
          name: 'Developer One',
          password: '$2b$12$coDQnalKv3kw8kzuwztyc.l6gfveM/ERMVQioVYN9OQq6KheDG3ae',
          adminPriv: false,
          created: '2022-11-24 11:27:52.118503',
          lastModified: '2022-11-25 11:27:52.118503'
        },
      ]);
    insertUsers.js: |
      use admin
      db.createUser({user:"SysAdmin",pwd:"SystemAccess2@",roles:[{role:"readWrite",db:"appStoreProdDB"}]})

# Note, the setting here was required to get it to work with a Kind cluster, but not sure if it's necessary for other providers
ingress-nginx:
  controller:
    updateStrategy:
      type: "RollingUpdate"
      rollingUpdate:
        maxUnavailable: 1
    hostPort:
      enabled: true
    terminationGracePeriodSeconds: 0
    service:
      type: "NodePort"
    watchIngressWithoutClass: true
    nodeSelector:
      ingress-ready: "true"
    tolerations:
      - key: "node-role.kubernetes.io/master"
        operator: "Equal"
        effect: "NoSchedule"
    publishService:
      enabled: false
    extraArgs:
      publish-status-address: "localhost"

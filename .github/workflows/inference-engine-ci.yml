name: Inference Engine CI

on:
  pull_request:
    branches:
      - main
    paths:
      - 'ai-model/inference-engine/**'
  push:
    branches:
      - main
    paths:
      - 'ai-model/inference-engine/**'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: DinoHub/appstore-ai-inference-engine
jobs:
  testing:
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    environment: test
    defaults:
      run:
        working-directory: ./ai-model/inference-engine
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: 3.9
          # cache: poetry
      - name: Install Poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: 1.2.2
      - run: |
          poetry install
      - name: Test with pytest
        run: |
          poetry run pytest --cov-report xml --cov=./ 
      - name: Code Coverage Summary Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: coverage.xml
          output: both
      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          path: code-coverage-results.md
  publish-package:
    needs: testing
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    environment: staging
    defaults:
      run:
        working-directory: ./ai-model/inference-engine
    steps:
        - uses: actions/checkout@v3
          if: github.event_name != 'pull_request'
        - name: Build and publish to pypi
          if: github.event_name != 'pull_request'
          uses: JRubics/poetry-publish@v1.13
          with:
            python_version: "3.9"
            pypi_token: ${{ env.PYPI_TOKEN }}
            repository_name: ${{ env.PYPI_REPOSITORY_NAME }}
            repository_url: ${{ env.PYPI_REPOSITORY_URL }}
  publish-image:
    needs: testing
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    environment: staging
    defaults:
      run:
        working-directory: ./ai-model/inference-engine
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
    steps:
      - uses: actions/checkout@v3
     # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@f3c664df7af409cb4873aa5068053ba9d61a57b6 #v2.6.0
        with:
          cosign-release: 'v1.11.0'


      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@79abd3f86f79a9d68a23c75a09a9a85889262adf

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@ac9327eae2b366085ac7f6a2d02df8aa8ead720a
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max


      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          COSIGN_EXPERIMENTAL: "true"
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign {}@${{ steps.build-and-push.outputs.digest }}
